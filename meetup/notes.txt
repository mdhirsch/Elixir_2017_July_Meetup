


Simple processes:
Open shell
iex -S mix
Show hello/0 code
spawn(Hello, :hello, ["world"])
Note that it prints, then shows PID

pid = spawn(HelloWithReceive, :hello, [])
send pid, {self(), "Michael"}  
Note that it waits, then prints

Finally, to reply:
pid = spawn(HelloWithReply, :hello, [])
send pid, {self(), "Michael"}  
So where is the reply?  Need to see your queue
flush()

The final trick is to call hello when the process has replied.  (Edit code and reload)

How efficient are processes?
Lets' use processes to count.
iex -S mix
Processes.run(3)
Processes.time_running(1)

If you ask for too many processes, you can run out of resources.  
Fortunately, there is a Erlang options for his

iex --erl "+P 2000000" -S mix
Processes.time_running(100_000)


Open two shells in the meetup directory

# Shell 
iex -S mix
iex --sname main -S mix
iex --name main@192.168.22.114 --cookie meetup -S mix
Node.connect :"other@zareason-laptop"                       
Node.connect :"other@192.168.x.x"                       

# Shell 2
iex --sname other -S mix
iex --sname other --cookie meetup -S mix
iex --name other@192.168.22.117 --cookie meetup -S mix
Node.connect :"main@zareason-laptop"                       
Node.connect :"main@192.168.22.114"                       

# Shell 1 -- test code in one VM
even_pid = spawn(Parity, :even_parity, [])
local_odd_pid = spawn(Parity, :odd_parity, [])
send even_pid, {self(), even_pid, local_odd_pid, 1}
flush() # to see messages

Parity.compute(even_pid, local_odd_pid, 1)


# Shell 1 -- tests in both VM's
odd_pid = Node.spawn_link :"other@zareason-laptop", fn -> Parity.odd_parity end
vm2_odd_pid = Node.spawn_link :"other@zareason-laptop", Parity, :odd_parity, []

Parity.compute(even_pid, vm2_odd_pid, 1)

remote_odd_pid = Node.spawn_link :"other@192.168.1.161", Parity, :odd_parity, []
send even_pid, {self(), even_pid, odd_pid, 0}
send even_pid, {self(), even_pid, remote_odd_pid, 1}
flush() # to see messages

Parity.compute(even_pid, remote_odd_pid, 0)

Processes:
start with: iex -S mix
Then, if you need more processes:: iex --erl "+P 1000000"  -S mix

run and time: Processes.time_running(1_000)    

